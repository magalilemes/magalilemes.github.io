<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Magali's Blog</title><link>https://magalilemes.github.io/</link><description>Recent content on Magali's Blog</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Mon, 21 Feb 2022 00:01:00 -0300</lastBuildDate><atom:link href="https://magalilemes.github.io/index.xml" rel="self" type="application/rss+xml"/><item><title>My first contribution to the Linux kernel</title><link>https://magalilemes.github.io/posts/first-contribution/</link><pubDate>Mon, 21 Feb 2022 00:01:00 -0300</pubDate><guid>https://magalilemes.github.io/posts/first-contribution/</guid><description>&lt;h2 id="finding-something-to-fix">Finding something to fix&lt;/h2>
&lt;p>There are many ways to start contributing to the Linux kernel, and one of them
is by fixing something, be it a coding style disagreement, compile errors or
static check warnings.&lt;/p>
&lt;p>Apart from finding something to fix yourself, an alternative is to look at what
automated bots designed to look for bugs and warnings in the kernel have already
found&lt;sup id="fnref:1">&lt;a href="#fn:1" class="footnote-ref" role="doc-noteref">1&lt;/a>&lt;/sup>. One of these bots is the &lt;em>kernel test robot&lt;/em>&lt;sup id="fnref:2">&lt;a href="#fn:2" class="footnote-ref" role="doc-noteref">2&lt;/a>&lt;/sup>, and an advantage of
going through the warnings found by this bot is that it provides the ways to
reproduce the settings that led to the compilation warnings.&lt;/p>
&lt;p>In my case, my Linux kernel mentor sent me a &lt;a class="link" href="https://lore.kernel.org/all/202201252155.rqBWi1tb-lkp@intel.com/" target="_blank" rel="noopener"
>warning reported by the kernel
test robot&lt;/a>
so that I could work on it and fix it. As mentioned before, the email sent by
the bot contains details to help finding the warning:&lt;/p>
&lt;ul>
&lt;li>the Git tree;&lt;/li>
&lt;li>the specific commit that triggered the warning;&lt;/li>
&lt;li>a .config file to use when building the kernel&lt;/li>
&lt;li>compiler version;&lt;/li>
&lt;li>static analysis tool used and its version (in this case, sparse);&lt;/li>
&lt;li>steps to reproduce the warning using the tools above.&lt;/li>
&lt;/ul>
&lt;p>Some emails sent by the kernel test robot can be found &lt;a class="link" href="https://linuxlists.cc/profile/44393/kbuild_test_robot%3e" target="_blank" rel="noopener"
>here&lt;/a>.&lt;/p>
&lt;h2 id="fixing">Fixing&lt;/h2>
&lt;p>After having found something to fix, it&amp;rsquo;s necessary to find the right tree to
work on. The &lt;a class="link" href="https://git.kernel.org/pub/scm/linux/kernel/git/torvalds/linux.git/tree/MAINTAINERS" target="_blank" rel="noopener"
>MAINTAINERS&lt;/a>
file on the kernel code contains this information, and there&amp;rsquo;s also the
&lt;code>./scripts/get_maintainer.pl&lt;/code> script to help with that.&lt;/p>
&lt;p>Given that I had to fix a warning found under the &lt;code>drivers/gpu/drm/amd/&lt;/code>
directory, I cloned the tree found at &lt;a class="link" href="https://gitlab.freedesktop.org/agd5f/linux.git" target="_blank" rel="noopener"
>https://gitlab.freedesktop.org/agd5f/linux.git&lt;/a>,
made the change accordingly, and recompiled to ensure that the previous warning
had been solved. After that, I commited the change.&lt;/p>
&lt;h2 id="sending-the-patch">Sending the patch&lt;/h2>
&lt;p>To send the patch to the appropriate mailing lists, I used &lt;a class="link" href="github.com/kworkflow/kworkflow/" >kworkflow&lt;/a>
and its &lt;code>git send-email&lt;/code> wrapper feature. I had already configured my .gitconfig
file using it, so to send my last commit I just ran&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">$ kw mail -s -1
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Finally, the email was sent, and all of the steps above led to my first
contribution to the Linux kernel &lt;a class="link" href="https://lore.kernel.org/lkml/20220202213856.409403-1-magalilemes00@gmail.com/" target="_blank" rel="noopener"
>here&lt;/a>.&lt;/p>
&lt;h2 id="references">References&lt;/h2>
&lt;div class="footnotes" role="doc-endnotes">
&lt;hr>
&lt;ol>
&lt;li id="fn:1">
&lt;p>&lt;a class="link" href="https://bottest.wiki.kernel.org/" target="_blank" rel="noopener"
>https://bottest.wiki.kernel.org/&lt;/a>&amp;#160;&lt;a href="#fnref:1" class="footnote-backref" role="doc-backlink">&amp;#x21a9;&amp;#xfe0e;&lt;/a>&lt;/p>
&lt;/li>
&lt;li id="fn:2">
&lt;p>&lt;a class="link" href="https://01.org/lkp/documentation/0-day-test-service" target="_blank" rel="noopener"
>https://01.org/lkp/documentation/0-day-test-service&lt;/a>&amp;#160;&lt;a href="#fnref:2" class="footnote-backref" role="doc-backlink">&amp;#x21a9;&amp;#xfe0e;&lt;/a>&lt;/p>
&lt;/li>
&lt;/ol>
&lt;/div></description></item><item><title>cd ~/linux</title><link>https://magalilemes.github.io/posts/cd-linux/</link><pubDate>Mon, 21 Feb 2022 00:00:00 -0300</pubDate><guid>https://magalilemes.github.io/posts/cd-linux/</guid><description>&lt;p>During this year, I will be contributing to the Linux kernel. More specifically,
I&amp;rsquo;ll add more tests to the AMD graphics driver DML library using the KUnit
framework.&lt;/p>
&lt;h2 id="amd-graphics-driver-in-the-linux-kernel">AMD Graphics Driver in the Linux Kernel&lt;/h2>
&lt;p>AMD graphics drivers live under the &lt;code>drivers/gpu/drm/amd&lt;/code> directory in the Linux
kernel code. DRM stands for Direct Rendering Manager, and its folder intends to
provide an interface for interacting with GPUs. Inside DRM, we can find the AMD
directory, supporting AMD graphic cards.&lt;/p>
&lt;h2 id="display">Display&lt;/h2>
&lt;p>AMD display driver has essentially two pieces: Display Core (DC) and Display
Manager (DM)&lt;sup id="fnref:1">&lt;a href="#fn:1" class="footnote-ref" role="doc-noteref">1&lt;/a>&lt;/sup>. The first one is OS-agnostic and handles hardware programming
and resource management. The second one, though, is OS-dependent and has
implementations of amdgpu base driver and DRM.&lt;/p>
&lt;h2 id="display-mode-library-dml">Display Mode Library (DML)&lt;/h2>
&lt;p>In &lt;code>drivers/gpu/drm/amd/display/dc/dml&lt;/code>, we find the Display Mode Library, which
&amp;ldquo;handles clock, watermark, and bandwidth calculation for
&lt;a class="link" href="https://www.kernel.org/doc/html/latest/gpu/amdgpu/display/dcn-overview.html" target="_blank" rel="noopener"
>DCN&lt;/a>&amp;rdquo;&lt;sup id="fnref:2">&lt;a href="#fn:2" class="footnote-ref" role="doc-noteref">2&lt;/a>&lt;/sup>.
This is a mathematical library that AMD graphic drivers use. In its
&lt;a class="link" href="https://gitlab.freedesktop.org/agd5f/linux/-/blob/amd-staging-drm-next/drivers/gpu/drm/amd/display/dc/dml/Makefile" target="_blank" rel="noopener"
>Makefile&lt;/a>,
it is also described as a &amp;ldquo;&amp;lsquo;utils&amp;rsquo; sub-component of DAL. It provides the general
basic services required by other DAL subcomponents.&amp;rdquo;&lt;/p>
&lt;h2 id="kunit">KUnit&lt;/h2>
&lt;p>One way to ensure that things are working the way they are supposed to is
through testing. Naturally, that also applies to software applications, and when
it comes to the Linux kernel, it couldn&amp;rsquo;t be different&lt;sup id="fnref:3">&lt;a href="#fn:3" class="footnote-ref" role="doc-noteref">3&lt;/a>&lt;/sup>: kselftest and KUnit
are two tools used to write tests, each serving a different purpose.&lt;/p>
&lt;ul>
&lt;li>
&lt;p>&lt;strong>kselftest&lt;/strong> uses scripts and programs to test features in the userspace.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>KUnit&lt;/strong> is a framework that provides unit testing, which is the process of
testing small components of code. This allows developers to test the behavior of
pieces of code inside the kernel source code, instead of testing an entire
feature.&lt;/p>
&lt;/li>
&lt;/ul>
&lt;h2 id="capstone-project">Capstone Project&lt;/h2>
&lt;p>Due to DML&amp;rsquo;s mathematical nature, introducing unit testing to this library is a
reasonable idea, and KUnit seems like a perfect fit for this purpose. As part of
my university capstone project, I&amp;rsquo;ll investigate how some functions in DML work,
add unit tests, refactor these functions and possibly make them robust and
well-structured.&lt;/p>
&lt;div class="footnotes" role="doc-endnotes">
&lt;hr>
&lt;ol>
&lt;li id="fn:1">
&lt;p>&lt;a class="link" href="https://www.kernel.org/doc/html/latest/gpu/amdgpu/display/index.html" target="_blank" rel="noopener"
>https://www.kernel.org/doc/html/latest/gpu/amdgpu/display/index.html&lt;/a>&amp;#160;&lt;a href="#fnref:1" class="footnote-backref" role="doc-backlink">&amp;#x21a9;&amp;#xfe0e;&lt;/a>&lt;/p>
&lt;/li>
&lt;li id="fn:2">
&lt;p>&lt;a class="link" href="https://git.kernel.org/pub/scm/linux/kernel/git/torvalds/linux.git/commit/?id=061bfa06a42a9f6cd192bae61a4bf0e746eccb39" target="_blank" rel="noopener"
>https://git.kernel.org/pub/scm/linux/kernel/git/torvalds/linux.git/commit/?id=061bfa06a42a9f6cd192bae61a4bf0e746eccb39&lt;/a>&amp;#160;&lt;a href="#fnref:2" class="footnote-backref" role="doc-backlink">&amp;#x21a9;&amp;#xfe0e;&lt;/a>&lt;/p>
&lt;/li>
&lt;li id="fn:3">
&lt;p>&lt;a class="link" href="https://www.kernel.org/doc/html/latest/dev-tools/testing-overview.html" target="_blank" rel="noopener"
>https://www.kernel.org/doc/html/latest/dev-tools/testing-overview.html&lt;/a>&amp;#160;&lt;a href="#fnref:3" class="footnote-backref" role="doc-backlink">&amp;#x21a9;&amp;#xfe0e;&lt;/a>&lt;/p>
&lt;/li>
&lt;/ol>
&lt;/div></description></item></channel></rss>